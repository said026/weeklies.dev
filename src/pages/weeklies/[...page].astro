---
import { getCollection, type CollectionEntry } from "astro:content"
import CardGrid from "~/components/CardGrid.astro"
import CardGridGroup from "~/components/CardGridGroup.astro"
import Pagination from "~/components/Pagination.astro"
import SearchFilter, { type FilterGroup } from "~/components/SearchFilter.astro"
import SidebarLayout from "~/components/SidebarLayout.astro"
import SidebarPanel from "~/components/SidebarPanel.astro"
import { WeeklyCategories, WeeklyTools } from "~/content/config.js"
import { paginate } from "~/helpers/paginate.js"
import MainLayout from "~/layouts/MainLayout.astro"
import SubmitWeekly from "./_components/SubmitWeekly.astro"
import WeeklyCard from "./_components/WeeklyCard.astro"

export const prerender = false

// Sorting priority: featured first, then compare subscribers, then sort alphabetically
function sortWeeklies(a: CollectionEntry<"weeklies">, b: CollectionEntry<"weeklies">) {
	if (a.data.featured && b.data.featured) {
		return a.data.featured - b.data.featured
	}

	if (a.data.featured && !b.data.featured) {
		return -1
	}

	if (!a.data.featured && b.data.featured) {
		return 1
	}

	if (a.data.stars === b.data.stars) {
		return b.data.title.localeCompare(a.data.title)
	}

	return b.data.stars - a.data.stars
}

// with '[...page]' rest routes we'll get undefined for the first page, default that to 1
// otherwise, try to parse the page number from the URL
const currentPage = typeof Astro.params.page === "undefined" ? 1 : parseInt(Astro.params.page)

// invalid page number!
if (!currentPage || isNaN(currentPage)) {
	return Astro.redirect("/404")
}

// search term from the search/filter panel
const search = Astro.url.searchParams.get("search")

// get a list of all supported categories, this is the same list used by the zod schema
const categories = Array.from(WeeklyCategories.keys())

// get a list of category filters applied to the request
const selectedCategories = Astro.url.searchParams.getAll("categories[]")

// massage category data for the Filter components
const categoryFilter: FilterGroup = {
	title: "Categories",
	options: categories.map((c) => ({
		id: c,
		name: "categories[]",
		value: c,
		label: WeeklyCategories.get(c)!,
		selected: selectedCategories.includes(c),
	})),
}

// get a list of all supported tools, this is the same list used by the zod schema
const tools = Array.from(WeeklyTools.keys())

// get a list of tool filters applied to the request
const selectedTools = Astro.url.searchParams.getAll("technology[]")

// massage tool data for the Filter components
const toolFilter: FilterGroup = {
	title: "Technology",
	options: tools.map((t) => ({
		id: t,
		name: "technology[]",
		value: t,
		label: WeeklyTools.get(t)!,
		selected: selectedTools.includes(t),
	})),
}

const searchRegex = search && new RegExp(search, "i")

function weeklyFilter(weekly: CollectionEntry<"weeklies">) {
	// if at least one category filter is applied, hide weeklies that don't match
	if (selectedCategories.length > 0) {
		if (!weekly.data.categories.some((c: string) => selectedCategories.includes(c))) {
			return false
		}
	}

	// if at least one tool filter is applied, hide weeklies that don't match
	if (selectedTools.length > 0) {
		if (!weekly.data.tools.some((c: string) => selectedTools.includes(c))) {
			return false
		}
	}

	// if a search term was used, filter down checking name/title/description
	if (searchRegex) {
		return (
			searchRegex.test(weekly.data.title) ||
			searchRegex.test(weekly.data.description) ||
			searchRegex.test(weekly.body)
		)
	}

	return true
}

// get weeklies, filtered by the applied search & filter, then sort the matches
const allWeeklies = await getCollection("weeklies", weeklyFilter).then((entries) =>
	entries.sort(sortWeeklies),
)

// take all matching weeklies and create a paginated list of results
const paginatedResults = paginate({
	data: allWeeklies,
	pageSize: 12,
	currentPage,
	route: "/weeklies/[...page]",
	searchParams: Astro.url.searchParams,
})

const { page, allPages } = paginatedResults

// make sure the requested page number is valid, if not redirect to the first page of results
if (allPages.length && !page) {
	return Astro.redirect(allPages[0])
}

const weeklies = page.data

const showRecentlyAdded =
	currentPage === 1 && !Array.from(Astro.url.searchParams).some(([_, value]) => !!value)
const recentlyAdded = showRecentlyAdded
	? allWeeklies.filter((entry) => entry.data.badge === "new")
	: []
const recentlyAddedSearch = new URLSearchParams(Astro.url.search)
recentlyAddedSearch.append("categories[]", "recent")
const recentlyAddedHref = `${Astro.url.pathname}?${recentlyAddedSearch.toString()}`
---

<MainLayout title="Weeklies" image={{ src: "/og/weeklies.jpg", alt: "Explore the possibilities" }}>
	<div class="bg-grid relative">
		<div class="grid-container">
			<h1
				class="heading-3 mx-auto max-w-screen-lg pt-24 text-center sm:heading-2 lg:heading-1 md:pt-32 lg:pt-40"
			>
				Stay up-to-date with more than 50 weeklies
			</h1>
		</div>
	</div>

	<SidebarLayout>
		<Fragment slot="sidebar">
			<SidebarPanel>
				<SearchFilter
					indexRoute="/weeklies"
					groups={[categoryFilter, toolFilter]}
					search={search}
					searchPlaceholder="Search for a weekly"
				/>
			</SidebarPanel>
			<SubmitWeekly class="hidden lg:block" />
		</Fragment>

		{
			weeklies.length > 0 ? (
				<div class="flex flex-col items-center gap-8 pb-10 pt-8 sm:px-4 sm:pb-12 md:gap-10 md:pb-16 lg:gap-12 lg:px-8 lg:pb-20 lg:pt-10 xl:px-10">
					<h2 class="sr-only">weeklies</h2>

					{showRecentlyAdded && recentlyAdded.length > 0 && (
						<CardGridGroup
							title="Recently Added"
							cta={
								recentlyAdded.length > 3
									? { href: recentlyAddedHref, text: "View all new weeklies" }
									: undefined
							}
						>
							<CardGrid class="w-full max-w-screen-2xl sm:grid-cols-2 xl:grid-cols-3">
								{recentlyAdded.slice(0, 3).map((weekly) => (
									<WeeklyCard weekly={weekly} />
								))}
							</CardGrid>
						</CardGridGroup>
					)}

					<CardGridGroup
						title={showRecentlyAdded && recentlyAdded.length > 0 ? "All weeklies" : undefined}
					>
						<CardGrid class="w-full max-w-screen-2xl sm:grid-cols-2 xl:grid-cols-3">
							{weeklies.map((weekly) => (
								<WeeklyCard weekly={weekly} />
							))}
						</CardGrid>
					</CardGridGroup>

					{allPages.length > 1 && (
						<Pagination restRoute page={page} allPages={allPages} class="mx-auto" />
					)}
				</div>
			) : (
				<div class="flex flex-col items-center gap-12 pt-8 text-center sm:px-4 md:px-8 lg:px-10 lg:pt-10">
					<p>
						<strong>0</strong> results found for weeklies matching <strong>"{search}"</strong>
					</p>
					<a href="/weeklies/" rel="prefetch" class="button button-primary">
						Clear filters
					</a>
				</div>
			)
		}

		<SubmitWeekly class="lg:hidden" />
	</SidebarLayout>
</MainLayout>
